// <auto-generated />
using System;
using BadWeather.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BadWeather.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220828072446_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BadWeather.Domain.Models.Metar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AltimeterInHg")
                        .HasColumnType("double precision");

                    b.Property<int?>("CloudBaseFeetAglLayer1")
                        .HasColumnType("integer");

                    b.Property<int?>("CloudBaseFeetAglLayer2")
                        .HasColumnType("integer");

                    b.Property<int?>("CloudBaseFeetAglLayer3")
                        .HasColumnType("integer");

                    b.Property<int?>("CloudBaseFeetAglLayer4")
                        .HasColumnType("integer");

                    b.Property<double?>("DewpointC")
                        .HasColumnType("double precision");

                    b.Property<string>("FlightCategory")
                        .HasColumnType("text");

                    b.Property<string>("ObservationTime")
                        .HasColumnType("text");

                    b.Property<string>("SkyCoverLayer1")
                        .HasColumnType("text");

                    b.Property<string>("SkyCoverLayer2")
                        .HasColumnType("text");

                    b.Property<string>("SkyCoverLayer3")
                        .HasColumnType("text");

                    b.Property<string>("SkyCoverLayer4")
                        .HasColumnType("text");

                    b.Property<string>("StationIcao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("TempC")
                        .HasColumnType("double precision");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Visibility")
                        .HasColumnType("double precision");

                    b.Property<double>("WindDirectionDegrees")
                        .HasColumnType("double precision");

                    b.Property<double>("WindGustKnots")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeedKnots")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Metars");
                });
#pragma warning restore 612, 618
        }
    }
}
